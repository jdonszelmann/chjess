deliverables:

1	-
2.1	Plan of action (bullet points are sufficient)
2.2	Use of design patterns (bullet points are sufficient)
2.3	Source code
3.1	-
3.2	-
3.3	WebSocket-based communication pattern between clients and server
3.4	-
3.5	Source code
4	-

1 ✓
2.1:

- write canvas control library (graphics.js)
- board implementation (using canvas lib)
- interaction (mouse, moves, animations)
- move detection
- win detection
- menus
- AI

- webserver (nodejs)
- websocket communication
- multiplayer implementation
- splash page design
- private multiplayer games

✓

2.2:

- constructor pattern (see for example chesspiece.js. many constructors :P)
- object oriented, using classes and inheritance for the different chesspieces and screen objects
- using the canvas (little/no html/css)
- mobile-playable
- no external libraries for the frontent (vanilla js). no jquery!
- singleton pattern for some classes like gamestate


✓


2.3: 

see this parent folder :)

✓

3.1: ✓
3.2: ✓

3.3: see app.js ✓

3.4: ✓
3.5: see app.js ✓

4: tested in chrome, edge, firefox and safari. works in fullscreen mode (windows: f11). runs on most touchscreen devices with the notable exception of many iphones.

but hey, who cares about apple anyways

✓