#!/usr/bin/env node

/**
 * Module dependencies.
 */

let fs = require('fs');
var app = require('../app');
var debug = require('debug')('chjess-server:server');
const http = require('http');
const https = require('https');

/**
 * Get port from environment and store in Express.
 */

let portHTTPS = normalizePort(process.env.PORT || '443');
let portHTTP = normalizePort(process.env.PORT || '8001');
app.set('port', portHTTPS);

/**
 * Create HTTP server to redirect to HTTPS.
 */

http.createServer(function (req, res) {
    res.writeHead(301, { "Location": "https://" + req.headers['host'] + req.url });
    res.end();
}).listen(portHTTP);

/**
 *  Create HTTPS server
 */

const options = {
    cert: fs.readFileSync("./public/cert/cert.pem"),
    key: fs.readFileSync("./public/cert/key.pem"),
}
let server = https.createServer(options,app).listen(portHTTPS);
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(portHTTPS, "0.0.0.0");

server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof portHTTPS === 'string'
    ? 'Pipe ' + portHTTPS
    : 'Port ' + portHTTPS;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

module.exports = {
    server,
    options,
    portHTTPS,
}